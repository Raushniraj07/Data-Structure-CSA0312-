
#include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 100

// Queue data structure
typedef struct {
    int items[MAX_SIZE];
    int front;
    int rear;
} Queue;

// Graph data structure
typedef struct {
    int vertices;
    int** adjMatrix;
    bool* visited;
} Graph;

// Function to create a queue
Queue* createQueue()
{
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->front = -1;
    queue->rear = -1;
    return queue;
}

// Function to check if the queue is empty
bool isEmpty(Queue* queue)
{
    if (queue->rear == -1)
        return true;
    else
        return false;
}

// Function to add an element to the queue
void enqueue(Queue* queue, int value)
{
    if (queue->rear == MAX_SIZE - 1)
        printf("\nQueue is full!");
    else {
        if (queue->front == -1)
            queue->front = 0;
        queue->rear++;
        queue->items[queue->rear] = value;
    }
}

// Function to remove an element from the queue
int dequeue(Queue* queue)
{
    int item;
    if (isEmpty(queue)) {
        printf("Queue is empty");
        item = -1;
    }
    else {
        item = queue->items[queue->front];
        queue->front++;
        if (queue->front > queue->rear) {
            queue->front = -1;
            queue->rear = -1;
        }
    }
    return item;
}

// Function to create a graph
Graph* createGraph(int vertices)
{
    int i;
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->vertices = vertices;

    graph->adjMatrix = (int**)malloc(vertices * sizeof(int*));
    for (i = 0; i < vertices; i++) {
        graph->adjMatrix[i] = (int*)malloc(vertices * sizeof(int));
    }

    graph->visited = (bool*)malloc(vertices * sizeof(bool));

    return graph;
}

// Function to add an edge to the graph
void addEdge(Graph* graph, int src, int dest)
{
    graph->adjMatrix[src][dest] = 1;
    graph->adjMatrix[dest][src] = 1;
}

// Function to perform BFS traversal
void BFS(Graph* graph, int startVertex)
{
    Queue* queue = createQueue();

    graph->visited[startVertex] = true;
    printf("Visited %d\n", startVertex);

    enqueue(queue, startVertex);

    while (!isEmpty(queue)) {
        int currentVertex = dequeue(queue);

        for (int i = 0; i < graph->vertices; i++) {
            if (graph->adjMatrix[currentVertex][i] == 1 && !graph->visited[i]) {
                graph->visited[i] = true;
                printf("Visited %d\n", i);
                enqueue(queue, i);
            }
        }
    }
}

// Function to free dynamically allocated memory
void freeMemory(Graph* graph)
{
    for (int i = 0; i < graph->vertices; i++) {
        free(graph->adjMatrix[i]);
    }
    free(graph->adjMatrix);
    free(graph->visited);
    free(graph);
}

int main()
{
    int vertices, edges, i, src, dest;

    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    printf("Enter the number
