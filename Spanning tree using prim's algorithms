#include <stdio.h>
#include <stdbool.h>
#define MAX_SIZE 100

int graph[MAX_SIZE][MAX_SIZE]; // Adjacency matrix representation of the graph
int parent[MAX_SIZE]; // Array to store the parent of each vertex
int key[MAX_SIZE]; // Array to store the key values of each vertex
bool mstSet[MAX_SIZE]; // Array to keep track of vertices included in the MST

int minKey(int n)
{
    int min = INT_MAX, min_index;
  
    for (int v = 0; v < n; v++)
        if (mstSet[v] == false && key[v] < min)
            min = key[v], min_index = v;
  
    return min_index;
}

void printMST(int n)
{
    printf("Edge \tWeight\n");
    for (int i = 1; i < n; i++)
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
}

void primMST(int n)
{
    for (int i = 0; i < n; i++)
    {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }
  
    key[0] = 0;
    parent[0] = -1;
  
    for (int count = 0; count < n - 1; count++)
    {
        int u = minKey(n);
  
        mstSet[u] = true;
  
        for (int v = 0; v < n; v++)
        {
            if (graph[u][v] && mstSet[v] == false && graph[u][v] < key[v])
            {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }
  
    printMST(n);
}

int main()
{
    int n; // Number of vertices in the graph

    printf("Enter the number of vertices: ");
    scanf("%d", &n);
  
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            scanf("%d", &graph[i][j]);
        }
    }

    printf("Minimum Spanning Tree:\n");
    primMST(n);
  
    return 0;
}
