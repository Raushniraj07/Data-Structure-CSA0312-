#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>

#define MAX_STACK_SIZE 100

typedef struct stack {
    int top;
    float items[MAX_STACK_SIZE];
} Stack;

void push(Stack *s, float value) {
    if (s->top == MAX_STACK_SIZE - 1) {
        printf("Stack overflow!\n");
        exit(EXIT_FAILURE);
    }
    s->items[++(s->top)] = value;
}

float pop(Stack *s) {
    if (s->top == -1) {
        printf("Stack underflow!\n");
        exit(EXIT_FAILURE);
    }
    return s->items[(s->top)--];
}

int is_operator(char symbol) {
    if (symbol == '+' || symbol == '-' || symbol == '*' || symbol == '/') {
        return 1;
    }
    return 0;
}

float evaluate_postfix(char postfix[]) {
    Stack s = { .top = -1 };

    for (int i = 0; postfix[i] != '\0'; i++) {
        char symbol = postfix[i];

        if (isdigit(symbol)) {
            float value = symbol - '0';
            push(&s, value);
        } else if (is_operator(symbol)) {
            float operand2 = pop(&s);
            float operand1 = pop(&s);

            switch (symbol) {
                case '+':
                    push(&s, operand1 + operand2);
                    break;
                case '-':
                    push(&s, operand1 - operand2);
                    break;
                case '*':
                    push(&s, operand1 * operand2);
                    break;
                case '/':
                    push(&s, operand1 / operand2);
                    break;
            }
        }
    }

    return pop(&s);
}

int main() {
    char postfix[] = "23+45+*";
    float result = evaluate_postfix(postfix);

    printf("The result is: %f\n", result);

    return 0;
}
