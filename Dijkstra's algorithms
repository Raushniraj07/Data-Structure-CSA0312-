import heapq

def dijkstra(graph, start):
    # Initialize the distance dictionary with infinity for all nodes except the start node
    distances = {node: float('inf') for node in graph}
    distances[start] = 0

    # Priority queue to keep track of the nodes to visit
    queue = [(0, start)]

    while queue:
        current_distance, current_node = heapq.heappop(queue)

        # Skip the node if we have already found a shorter path to it
        if current_distance > distances[current_node]:
            continue

        # Visit all the neighbors of the current node
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight

            # If the new distance is shorter, update the distance and add it to the queue
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(queue, (distance, neighbor))

    return distances

